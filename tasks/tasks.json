{
  "project_info": {
    "name": "GradeBot - AI Feedback Assistant",
    "description": "AI-powered assignment grading and feedback system for educators",
    "development_philosophy": "User value first, then technical perfection",
    "mvp_definition": "Teachers can create assignments, see AI processing results, and export feedback to Google Docs"
  },
  "tasks": [
    {
      "id": 1,
      "title": "Project initialization with Rails",
      "description": "Set up the base Rails project with required gems and configurations",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 8
    },
    {
      "id": 2,
      "title": "Configure Tailwind CSS",
      "description": "Set up Tailwind CSS for styling the application",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 3,
      "estimated_hours": 4
    },
    {
      "id": 3,
      "title": "Configure Stimulus JS",
      "description": "Set up Stimulus JS for interactive UI components",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 3,
      "estimated_hours": 4
    },
    {
      "id": 4,
      "title": "Set up GitHub repository",
      "description": "Initialize GitHub repository with appropriate configuration",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 2,
      "estimated_hours": 2
    },
    {
      "id": 5,
      "title": "Create User model and migration",
      "description": "Implement the User model with basic fields for Google OAuth authentication",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 6
    },
    {
      "id": 6,
      "title": "Create Session model and migration",
      "description": "Implement the Session model for maintaining user authentication state",
      "status": "done",
      "dependencies": [
        5
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 7,
      "title": "Create UserToken model and migration",
      "description": "Implement the UserToken model for storing OAuth tokens",
      "status": "done",
      "dependencies": [
        5
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 8,
      "title": "Configure OmniAuth for Google OAuth2",
      "description": "Set up OmniAuth with Google OAuth2 provider for authentication",
      "status": "done",
      "dependencies": [
        5,
        6,
        7
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 9,
      "title": "Implement Authentication Concern",
      "description": "Create a controller concern for handling authentication logic",
      "status": "done",
      "dependencies": [
        8
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 10,
      "title": "Create SessionsController with new action",
      "description": "Implement SessionsController with action for initiating Google OAuth",
      "status": "done",
      "dependencies": [
        9
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 11,
      "title": "Implement SessionsController callback action",
      "description": "Add callback handling to SessionsController for processing OAuth responses",
      "status": "done",
      "dependencies": [
        10
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 12,
      "title": "Add logout functionality to SessionsController",
      "description": "Implement action for logging out users and destroying sessions",
      "status": "done",
      "dependencies": [
        11
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 3,
      "estimated_hours": 3
    },
    {
      "id": 13,
      "title": "Add logo and favicon",
      "description": "Create and implement application logo and favicon for consistent branding",
      "status": "done",
      "dependencies": [
        1,
        2
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 2,
      "estimated_hours": 3
    },
    {
      "id": 14,
      "title": "Create Assignment model and migration",
      "description": "Implement the core Assignment model for representing teacher assignments",
      "status": "done",
      "dependencies": [
        5
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 15,
      "title": "Create SelectedDocument model and migration",
      "description": "Implement the SelectedDocument model for Google Doc selections",
      "status": "done",
      "dependencies": [
        14
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 16,
      "title": "Create Rubric model and migration",
      "description": "Implement the Rubric model for structured grading rubrics",
      "status": "done",
      "dependencies": [
        14
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 17,
      "title": "Create Criterion model and migration",
      "description": "Implement the Criterion model for rubric criteria",
      "status": "done",
      "dependencies": [
        16
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 18,
      "title": "Create Level model and migration",
      "description": "Implement the Level model for criterion achievement levels",
      "status": "done",
      "dependencies": [
        17
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 19,
      "title": "Create StudentWork model and migration",
      "description": "Implement the StudentWork model for individual student submissions",
      "status": "done",
      "dependencies": [
        14
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 20,
      "title": "Create StudentWorkCriterionLevel model and migration",
      "description": "Implement the join model between StudentWork, Criterion, and Level",
      "status": "done",
      "dependencies": [
        17,
        18
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 5
    },
    {
      "id": 21,
      "title": "Create FeedbackItem model and migration",
      "description": "Implement the FeedbackItem model for structured feedback points",
      "status": "done",
      "dependencies": [
        18
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 5
    },
    {
      "id": 22,
      "title": "Create StudentWorkCheck model and migration",
      "description": "Implement the StudentWorkCheck model for verification checks",
      "status": "done",
      "dependencies": [
        18
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 23,
      "title": "Create AssignmentSummary model and migration",
      "description": "Implement the AssignmentSummary model for class-wide insights",
      "status": "done",
      "dependencies": [
        14
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 24,
      "title": "Create LLMRequest model and migration",
      "description": "Implement the LLMRequest model for tracking LLM interactions",
      "status": "done",
      "dependencies": [
        5
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 5
    },
    {
      "id": 25,
      "title": "Create ProcessingMetric model and migration",
      "description": "Implement the ProcessingMetric model for tracking processing performance",
      "status": "done",
      "dependencies": [
        14
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 26,
      "title": "Implement ApplicationController authentication",
      "description": "Configure ApplicationController with authentication requirements",
      "status": "done",
      "dependencies": [
        9
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 4
    },
    {
      "id": 27,
      "title": "Create home page controller and view",
      "description": "Implement basic home page for the application",
      "status": "done",
      "dependencies": [
        26
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 3,
      "estimated_hours": 4
    },
    {
      "id": 28,
      "title": "Create AssignmentsController with index action",
      "description": "Implement controller and view for listing assignments",
      "status": "done",
      "dependencies": [
        13,
        26
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 6
    },
    {
      "id": 29,
      "title": "Add new action to AssignmentsController",
      "description": "Implement action and view for creating new assignments",
      "status": "done",
      "dependencies": [
        28
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 8
    },
    {
      "id": 30,
      "title": "Create Google API configuration",
      "description": "Set up configuration for Google API integration",
      "status": "done",
      "dependencies": [
        8
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 31,
      "title": "Implement Google Picker Stimulus controller",
      "description": "Create Stimulus controller for Google Picker integration",
      "status": "done",
      "dependencies": [
        3,
        30
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 7,
      "estimated_hours": 12
    },
    {
      "id": 32,
      "title": "Add create action to AssignmentsController",
      "description": "Implement action for saving new assignments",
      "status": "done",
      "dependencies": [
        29,
        31
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 33,
      "title": "Create DocumentSelection::BulkCreationService",
      "description": "Implement service for creating document selections in bulk",
      "status": "done",
      "dependencies": [
        14,
        32
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 34,
      "title": "Create Assignment::InitializerService",
      "description": "Implement service for initializing assignments with related records",
      "status": "done",
      "dependencies": [
        33
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 35,
      "title": "Create LLM::Client base class",
      "description": "Implement the base client class for LLM integration",
      "status": "done",
      "dependencies": [
        23
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 36,
      "title": "Implement LLM::AnthropicClient",
      "description": "Create client implementation for Anthropic's Claude API",
      "status": "done",
      "dependencies": [
        35
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 7,
      "estimated_hours": 12
    },
    {
      "id": 37,
      "title": "Implement LLM::GoogleClient",
      "description": "Create client implementation for Google's PaLM API",
      "status": "done",
      "dependencies": [
        35
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 7,
      "estimated_hours": 12
    },
    {
      "id": 38,
      "title": "Create LLM::ClientFactory",
      "description": "Implement factory for creating appropriate LLM client instances",
      "status": "done",
      "dependencies": [
        36,
        37
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 39,
      "title": "Implement LLM::RetryHandler",
      "description": "Create retry mechanism for handling LLM request failures",
      "status": "done",
      "dependencies": [
        35
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 40,
      "title": "Implement LLM::CircuitBreaker",
      "description": "Create circuit breaker for preventing cascading failures",
      "status": "done",
      "dependencies": [
        39
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 7,
      "estimated_hours": 10
    },
    {
      "id": 41,
      "title": "Create LLM::CostCalculator",
      "description": "Implement calculator for determining LLM request costs",
      "status": "done",
      "dependencies": [
        35
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 42,
      "title": "Create LLM::CostTracker",
      "description": "Implement tracker for recording LLM request costs",
      "status": "done",
      "dependencies": [
        41,
        23
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 43,
      "title": "Create PromptTemplate class",
      "description": "Implement template handling for LLM prompts",
      "status": "done",
      "dependencies": [
        35
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 6,
      "estimated_hours": 8
    },
    {
      "id": 44,
      "title": "Create PromptBuilder class",
      "description": "Implement builder for constructing LLM prompts",
      "status": "done",
      "dependencies": [
        43
      ],
      "priority": "high",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 6
    },
    {
      "id": 45,
      "title": "Create prompt templates directory structure",
      "description": "Set up directory structure for prompt templates",
      "status": "done",
      "dependencies": [
        43
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 2,
      "estimated_hours": 2
    },
    {
      "id": 46,
      "title": "Create rubric generation prompt template",
      "description": "Implement template for generating structured rubrics",
      "status": "done",
      "dependencies": [
        45
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 6
    },
    {
      "id": 47,
      "title": "Create student feedback prompt template",
      "description": "Implement template for generating student work feedback",
      "status": "done",
      "dependencies": [
        45
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 5,
      "estimated_hours": 8
    },
    {
      "id": 48,
      "title": "Create assignment summary prompt template",
      "description": "Implement template for generating assignment-level insights",
      "status": "done",
      "dependencies": [
        45
      ],
      "priority": "medium",
      "phase": "foundation",
      "complexity": 4,
      "estimated_hours": 6
    },
    {
      "id": 49,
      "title": "Document Pipeline Architecture Decision",
      "description": "Create decision log entry documenting the new pipeline architecture approach",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 3,
      "estimated_hours": 4
    },
    {
      "id": 50,
      "title": "Update plan.md with New Pipeline Architecture",
      "description": "Update documentation to reflect the new pipeline architecture",
      "status": "done",
      "dependencies": [
        49
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 3,
      "estimated_hours": 4
    },
    {
      "id": 51,
      "title": "Implement Core Pipeline Context Objects",
      "description": "Create context objects that maintain state throughout pipeline execution using the modular pipeline architecture. Implement Pipeline::Context::Base with metrics tracking, timing measurement, and state management. Create specialized context classes for Rubric, StudentWork, and AssignmentSummary pipelines that maintain data flow between pipeline steps and provide consistent interface for error handling and result building.",
      "status": "done",
      "dependencies": [
        50
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 8,
      "estimated_hours": 16,
      "details": "CRITICAL: Fixed dependencies - removed references to missing tasks. Create Pipeline::Context::Base, Pipeline::Context::Rubric, Pipeline::Context::StudentWork, and Pipeline::Context::AssignmentSummary classes."
    },
    {
      "id": 52,
      "title": "Implement ProcessingResult Classes",
      "description": "Create standardized result classes to encapsulate pipeline execution outcomes. Implement ProcessingResult with success/failure status, data payload, error messages, and performance metrics. Create ProcessingResults collection class for aggregating multiple pipeline results. Ensure consistent result handling across all pipeline operations with proper error propagation and metrics collection using immutable result objects for thread safety.",
      "status": "done",
      "dependencies": [
        51
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 6,
      "estimated_hours": 10
    },
    {
      "id": 53,
      "title": "Implement Pipeline Support Services",
      "description": "Create BroadcastService for real-time UI updates and RecordMetricsService for performance tracking. BroadcastService publishes processing events (rubric_started, rubric_completed, etc.) via ActionCable for live status updates to teachers. RecordMetricsService captures detailed metrics for each processing step including timing, token usage, and costs. Both services integrate seamlessly with the pipeline architecture and include error handling and fallback mechanisms.",
      "status": "in-progress",
      "dependencies": [
        51,
        52
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 8,
      "estimated_hours": 16
    },
    {
      "id": 54,
      "title": "Implement PromptInput Classes",
      "description": "Create specialized classes that prepare and format data for LLM prompts in each pipeline. Implement PromptInput::Rubric for assignment and rubric context, PromptInput::StudentWork for student work analysis, and PromptInput::AssignmentSummary for class-wide insights. Each class handles data extraction, formatting, and prompt construction using the existing PromptTemplate system with proper error handling, data validation, and consistent prompt formatting across all pipelines.",
      "status": "pending",
      "dependencies": [
        51,
        53
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 7,
      "estimated_hours": 14
    },
    {
      "id": 55,
      "title": "Implement LLM Generator Classes",
      "description": "Create specialized generator classes for different processing types that integrate with the existing LLM client architecture. Implement LLM::Rubric::Generator, LLM::StudentWork::Generator, and LLM::AssignmentSummary::Generator. Each uses LLM::ClientFactory for provider selection, includes retry logic via LLM::RetryHandler, and integrates with LLM::CostTracker for automatic cost tracking. Generators handle provider-specific request formatting, response handling, and token usage monitoring with provider-agnostic request handling.",
      "status": "pending",
      "dependencies": [
        54,
        38
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 9,
      "estimated_hours": 20
    },
    {
      "id": 56,
      "title": "Implement LLM Response Parser Classes",
      "description": "Create parser classes to transform raw LLM responses into structured application data. Implement LLM::Rubric::ResponseParser to extract criteria and levels, LLM::StudentWork::ResponseParser for feedback items and criterion assessments, and LLM::AssignmentSummary::ResponseParser for class insights. Each parser handles robust JSON parsing with error recovery, data validation and sanitization, handling of malformed or unexpected responses, and consistent data structure output across all parsers.",
      "status": "pending",
      "dependencies": [
        55
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 8,
      "estimated_hours": 16
    },
    {
      "id": 57,
      "title": "Implement Pipeline Storage Services",
      "description": "Create storage services to persist processed data to the database with transaction safety. Implement Pipeline::Storage::RubricService to create Rubric, Criterion, and Level records, Pipeline::Storage::StudentWorkService for feedback items and assessments, and Pipeline::Storage::AssignmentSummaryService for class insights. Each service handles database transactions with rollback on errors, data validation before persistence, efficient bulk operations for large datasets, and integration with existing ActiveRecord models.",
      "status": "pending",
      "dependencies": [
        56
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 7,
      "estimated_hours": 14
    },
    {
      "id": 58,
      "title": "Implement Core Pipeline Orchestration Classes",
      "description": "Create the main pipeline classes that orchestrate the entire processing workflow. Implement Pipeline::Base with common orchestration logic, RubricPipeline, StudentWorkFeedbackPipeline, and AssignmentSummaryPipeline. Each pipeline follows the standardized step configuration pattern with consistent error handling, metrics tracking, and context management. Pipelines coordinate between prompt input, LLM generation, response parsing, and storage services with real-time progress tracking and broadcasting.",
      "status": "pending",
      "dependencies": [
        53,
        54,
        55,
        56,
        57
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 9,
      "estimated_hours": 20
    },
    {
      "id": 59,
      "title": "Implement AssignmentProcessor Class",
      "description": "Create the main entry point that orchestrates execution of individual pipelines in the correct sequence. AssignmentProcessor coordinates RubricPipeline, multiple StudentWorkFeedbackPipeline instances, and AssignmentSummaryPipeline. Handles sequential pipeline execution with dependency management, comprehensive error handling across all pipelines, real-time progress updates for teachers, and final result aggregation with assignment status updates.",
      "status": "pending",
      "dependencies": [
        58,
        52
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 8,
      "estimated_hours": 16
    },
    {
      "id": 60,
      "title": "Update AssignmentJob to Use New Pipeline",
      "description": "Refactor the existing AssignmentJob to utilize the new AssignmentProcessor architecture. Replace legacy processing logic with calls to AssignmentProcessor, update error handling to work with ProcessingResult objects, and ensure proper job status tracking. Maintain backward compatibility while leveraging the new pipeline's improved reliability, enhanced progress tracking, and comprehensive logging and monitoring capabilities.",
      "status": "pending",
      "dependencies": [
        59
      ],
      "priority": "high",
      "phase": "mvp_pipeline",
      "complexity": 5,
      "estimated_hours": 8
    },
    {
      "id": 61,
      "title": "Add show action to AssignmentsController",
      "description": "CRITICAL MVP TASK: Implement controller action for displaying assignment details and real-time processing status. Create show action that handles different assignment states (pending, processing, completed, failed) with appropriate data loading and error handling. Integrate with ActionCable for real-time status updates, include route configuration, efficient data loading with proper eager loading, and comprehensive error handling for different failure modes. This is the entry point for teachers to see their assignment results.",
      "status": "pending",
      "dependencies": [
        60
      ],
      "priority": "critical",
      "phase": "mvp_ui",
      "complexity": 6,
      "estimated_hours": 10,
      "details": "This is the missing link! Teachers need to see what happens after they create assignments. Without this, the product is unusable."
    },
    {
      "id": 62,
      "title": "Create assignment show view with status tracking",
      "description": "CRITICAL MVP TASK: Create comprehensive view for displaying assignment processing status with real-time updates. Implement progress indicators, status messages, time estimation display, and error state handling. Use ActionCable for live updates of processing progress with progressive enhancement for graceful degradation. Include mobile-responsive design with touch-friendly interface and comprehensive error messaging with recovery suggestions. This is what teachers see during and after assignment processing.",
      "status": "pending",
      "dependencies": [
        61
      ],
      "priority": "critical",
      "phase": "mvp_ui",
      "complexity": 7,
      "estimated_hours": 12,
      "details": "Real-time status updates, progress indicators, error handling. This is what teachers see while their assignments are being processed."
    },
    {
      "id": 63,
      "title": "Create assignment results display components",
      "description": "CRITICAL MVP TASK: Build comprehensive UI components for displaying AI-generated rubric, student feedback, and assignment summaries. Create tabbed interface for easy navigation between rubric view, individual student feedback, and class insights. Include expandable/collapsible sections for detailed content, search and filter functionality for large datasets, and export options for sharing and external use. This is where teachers see the core value of AI-generated content with professional presentation and easy navigation.",
      "status": "pending",
      "dependencies": [
        62
      ],
      "priority": "critical",
      "phase": "mvp_ui",
      "complexity": 8,
      "estimated_hours": 16,
      "details": "Display generated rubric, student work feedback, and assignment summaries. This is where teachers see the AI-generated content."
    },
    {
      "id": 64,
      "title": "Implement feedback editing interface",
      "description": "CRITICAL MVP TASK: Create intuitive interface for teachers to review and edit AI-generated feedback before sharing with students. Implement inline editing for feedback items, WYSIWYG editor for rich text content, auto-save functionality, and approval workflow. Include seamless inline editing with immediate visual feedback, rich text editing capabilities for formatted feedback, automatic saving with conflict resolution, and batch operations for efficient bulk editing with change tracking and version history.",
      "status": "pending",
      "dependencies": [
        63
      ],
      "priority": "critical",
      "phase": "mvp_ui",
      "complexity": 8,
      "estimated_hours": 16,
      "details": "Inline editing, approval workflow, additional comments. Teachers need to customize the AI feedback before sharing with students."
    },
    {
      "id": 65,
      "title": "Implement Google Docs feedback integration",
      "description": "CRITICAL MVP TASK: Add functionality to append edited feedback directly to original Google Docs. Integrate with Google Docs API using existing drive.file scope permissions with seamless integration to existing Google OAuth flow. Handle document formatting preservation, batch processing for multiple documents with progress tracking, comprehensive error handling for API failures with user-friendly messaging, and user feedback on success/failure. This completes the teacher-to-student feedback delivery workflow.",
      "status": "pending",
      "dependencies": [
        64
      ],
      "priority": "critical",
      "phase": "mvp_ui",
      "complexity": 9,
      "estimated_hours": 20,
      "details": "The final step in the value chain - getting feedback back to students via their original Google Docs. High complexity due to Google Docs API integration."
    },
    {
      "id": 66,
      "title": "Create assignment insights dashboard",
      "description": "Build comprehensive dashboard showing class-wide insights and trends from assignment analysis. Display class performance metrics, common strengths and areas for improvement, grade distribution analytics, and actionable recommendations for instruction. Include real-time data visualization with interactive charts, trend analysis across multiple assignments over time, actionable insights and instructional recommendations, and professional reporting features for stakeholder communication with export functionality.",
      "status": "pending",
      "dependencies": [
        63
      ],
      "priority": "high",
      "phase": "mvp_ui",
      "complexity": 7,
      "estimated_hours": 14,
      "details": "Class performance overview, common patterns, actionable insights for instruction. Completes the teacher value proposition."
    },
    {
      "id": 67,
      "title": "Create Subscription model and migration",
      "description": "Implement comprehensive Subscription model for managing user subscriptions with different tiers (Free: 1 assignment/month, Paid: 300 assignments/month). Include fields for subscription status, plan type, billing cycle, usage limits, and Stripe integration data. Create migration with proper indexes and constraints, implement validation logic and plan comparison methods, usage limit enforcement and tracking, and integration with Stripe subscription management with plan upgrade/downgrade workflow support.",
      "status": "pending",
      "dependencies": [
        5
      ],
      "priority": "medium",
      "phase": "business_model",
      "complexity": 5,
      "estimated_hours": 8
    },
    {
      "id": 68,
      "title": "Configure Stripe integration",
      "description": "Set up comprehensive Stripe integration for payment processing and subscription management. Configure Stripe gem and API integration, implement customer creation workflow and subscription management workflows, set up subscription products and pricing, configure webhooks for subscription events with real-time processing. Include secure payment processing with PCI compliance, automated subscription lifecycle management, and comprehensive testing framework with Stripe test mode for reliable payment handling.",
      "status": "pending",
      "dependencies": [
        67
      ],
      "priority": "medium",
      "phase": "business_model",
      "complexity": 8,
      "estimated_hours": 16
    },
    {
      "id": 69,
      "title": "Implement usage tracking and limits",
      "description": "Add comprehensive system to track assignment usage and enforce subscription limits. Implement monthly usage counting with efficient queries, limit enforcement logic with graceful degradation and upgrade prompts, automatic reset mechanisms aligned with billing cycles, and user notification system for approaching limits. Include real-time usage tracking, comprehensive usage analytics and reporting, and integration with subscription tiers for seamless limit management.",
      "status": "pending",
      "dependencies": [
        68
      ],
      "priority": "medium",
      "phase": "business_model",
      "complexity": 7,
      "estimated_hours": 14
    },
    {
      "id": 70,
      "title": "Create subscription management UI",
      "description": "Build comprehensive interface for users to manage their subscriptions including plan comparison with feature highlighting, upgrade/downgrade options with seamless workflow, payment method management with Stripe integration, and billing history display with invoice access. Include usage statistics, billing cycle information, promotional pricing display, and responsive design with clear call-to-action flows for optimal user experience and conversion.",
      "status": "pending",
      "dependencies": [
        69
      ],
      "priority": "medium",
      "phase": "business_model",
      "complexity": 6,
      "estimated_hours": 12
    },
    {
      "id": 71,
      "title": "Implement billing webhooks",
      "description": "Handle Stripe webhook events for subscription changes including payment success/failure, subscription updates, cancellations, and invoice events. Implement webhook endpoint with proper security verification and signature verification, event processing logic for all subscription events with idempotent handling, subscription state synchronization with database, and user notification handling. Include comprehensive event logging and monitoring with automatic retry and error recovery mechanisms.",
      "status": "pending",
      "dependencies": [
        68
      ],
      "priority": "medium",
      "phase": "business_model",
      "complexity": 7,
      "estimated_hours": 12
    },
    {
      "id": 72,
      "title": "Create upgrade/downgrade flows",
      "description": "Implement seamless subscription tier changes with prorated billing for immediate upgrades with fair billing calculation, timing logic for graceful downgrades at end of current billing period, and confirmation workflows with clear communication of billing changes to users. Handle immediate upgrades with prorated charges, end-of-period downgrades, plan change notifications, and comprehensive testing for all billing scenarios and edge cases to ensure reliable subscription management.",
      "status": "pending",
      "dependencies": [
        70,
        71
      ],
      "priority": "medium",
      "phase": "business_model",
      "complexity": 6,
      "estimated_hours": 10
    },
    {
      "id": 73,
      "title": "Create UserActivity model and tracking",
      "description": "Implement comprehensive system to track user activity for analytics and gamification features. Create UserActivity model to capture assignment creation, processing completion, login frequency, and feature usage with comprehensive activity tracking across all user interactions. Include efficient data aggregation methods for analytics, privacy-compliant tracking with user consent and opt-out options, and integration foundation for gamification features like streak tracking and achievement systems.",
      "status": "pending",
      "dependencies": [
        5
      ],
      "priority": "low",
      "phase": "retention",
      "complexity": 5,
      "estimated_hours": 8
    },
    {
      "id": 74,
      "title": "Implement streak tracking system",
      "description": "Add streak counting and achievement system to encourage regular usage. Implement daily activity measurement with streak calculation logic, achievement badge system with milestone rewards and unlockable badges, streak recovery mechanics with grace periods to maintain engagement during gaps, and notification system for achievements and milestones. Include daily streak tracking with visual progress indicators and gamified notifications with celebration moments for user motivation.",
      "status": "pending",
      "dependencies": [
        73
      ],
      "priority": "low",
      "phase": "retention",
      "complexity": 6,
      "estimated_hours": 10
    },
    {
      "id": 75,
      "title": "Create usage statistics dashboard",
      "description": "Build comprehensive analytics dashboard for teachers to see their usage patterns, assignment history, and productivity metrics. Include interactive charts for assignment frequency with drill-down capabilities, time savings calculations and productivity metrics, student work volume trends, and feature adoption metrics. Implement time-based filtering and date range selection, export functionality for data sharing and reporting, and mobile-responsive design for on-the-go access with professional presentation.",
      "status": "pending",
      "dependencies": [
        73
      ],
      "priority": "low",
      "phase": "retention",
      "complexity": 7,
      "estimated_hours": 12
    },
    {
      "id": 76,
      "title": "Implement contribution visualization",
      "description": "Create GitHub-style contribution graph for teacher activity showing daily usage patterns, assignment creation frequency, and engagement trends. Implement heatmap visualization with activity intensity calculation and color coding, interactive tooltips with detailed activity information for exploration of historical usage data, year-over-year comparison and historical trends, and integration with gamification and streak tracking for motivational visualization to encourage consistent usage.",
      "status": "pending",
      "dependencies": [
        75
      ],
      "priority": "low",
      "phase": "retention",
      "complexity": 6,
      "estimated_hours": 10
    },
    {
      "id": 77,
      "title": "Add performance optimization",
      "description": "Implement comprehensive performance optimization including Redis caching for frequently accessed data with intelligent caching strategy for improved response times, database query optimization with proper indexing and optimized queries, background job monitoring and scaling with auto-scaling capabilities, performance metrics dashboard with alerting and comprehensive performance monitoring. Include error tracking integration and load testing framework for scalability validation to ensure reliable system performance under load.",
      "status": "pending",
      "dependencies": [
        60
      ],
      "priority": "low",
      "phase": "optimization",
      "complexity": 8,
      "estimated_hours": 20
    },
    {
      "id": 78,
      "title": "Add advanced assignment features",
      "description": "Implement additional assignment types and customization options including multiple rubric templates with customization options and flexible rubric system, advanced feedback customization and formatting for personalized feedback styles, assignment template system for reusability and streamlined assignment creation, batch processing features for efficiency in managing large classes, and advanced search and filtering capabilities for assignment management with batch operations for efficient class management.",
      "status": "pending",
      "dependencies": [
        66
      ],
      "priority": "low",
      "phase": "enhancement",
      "complexity": 7,
      "estimated_hours": 16
    }
  ],
  "development_phases": {
    "foundation": {
      "description": "Core Rails setup, authentication, models, and basic LLM integration - COMPLETED",
      "tasks": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48
      ],
      "status": "completed",
      "total_estimated_hours": 284
    },
    "mvp_pipeline": {
      "description": "New pipeline architecture - the AI processing engine",
      "tasks": [
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "status": "in_progress",
      "total_estimated_hours": 154
    },
    "mvp_ui": {
      "description": "CRITICAL: User interface for viewing and interacting with results - WITHOUT THIS, PRODUCT IS UNUSABLE",
      "tasks": [
        61,
        62,
        63,
        64,
        65,
        66
      ],
      "status": "not_started",
      "total_estimated_hours": 88,
      "critical_note": "This phase is the difference between a technical demo and a usable product. Teachers MUST be able to see and interact with AI results."
    },
    "business_model": {
      "description": "Subscription system and billing - enables revenue generation",
      "tasks": [
        67,
        68,
        69,
        70,
        71,
        72
      ],
      "status": "not_started",
      "total_estimated_hours": 72
    },
    "retention": {
      "description": "Analytics and gamification - improves user engagement and retention",
      "tasks": [
        73,
        74,
        75,
        76
      ],
      "status": "not_started",
      "total_estimated_hours": 40
    },
    "optimization": {
      "description": "Performance improvements and monitoring",
      "tasks": [
        77
      ],
      "status": "not_started",
      "total_estimated_hours": 20
    },
    "enhancement": {
      "description": "Advanced features and customization options",
      "tasks": [
        78
      ],
      "status": "not_started",
      "total_estimated_hours": 16
    }
  },
  "critical_path": {
    "description": "Minimum tasks for functional MVP - teachers can create assignments AND see/interact with results",
    "tasks": [
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65
    ],
    "total_estimated_hours": 242,
    "priority_explanation": "These 15 tasks transform the product from 'can create assignments' to 'can create assignments and see valuable AI feedback'. This is the complete user value loop."
  },
  "priority_definitions": {
    "critical": "Blocks core user value - teachers cannot complete their workflow without this",
    "high": "Important for user experience but users can work around missing functionality",
    "medium": "Improves experience significantly but not essential for core workflow",
    "low": "Nice to have features that add polish and retention value"
  },
  "complexity_scale": {
    "1-3": "Simple - straightforward implementation, well-understood patterns",
    "4-6": "Moderate - some complexity, may require research or integration work",
    "7-8": "Complex - significant implementation challenges, multiple moving parts",
    "9-10": "Very Complex - high technical risk, external API integration, or novel solutions required"
  },
  "development_strategy": {
    "current_status": "Foundation complete, pipeline architecture in progress, UI phase completely missing",
    "immediate_priority": "Complete pipeline architecture (tasks 51-60), then immediately build results UI (tasks 61-66)",
    "success_metrics": "Teachers saying 'This saves me hours' after using the complete workflow",
    "risk_mitigation": "Build thin slices end-to-end rather than perfecting individual components",
    "user_feedback_plan": "Deploy results UI as soon as possible to get teacher feedback on AI output quality"
  }
}